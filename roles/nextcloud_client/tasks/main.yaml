- name: get the user id running the deploy
  become: false
  local_action: command id -u
  register: user_id

- name: get the group id running the deploy
  become: false
  local_action: command id -g
  register: group_id

- name: Creating ~/servers/nclient directory for the docker-compose file
  become: false
  file:
    path: '~/servers/nclient'
    state: directory

- name: Creating ~/servers/nclient/config directory for the docker-compose file
  become: false
  file:
    path: '~/servers/nclient/config'
    state: directory

- name: Creating ~/servers/nclient/nextcloud directory for the docker-compose file
  become: false
  file:
    path: '~/servers/nclient/nextcloud'
    state: directory

- name: Copy the server folder
  become: false
  copy:
    src: files/    # note the '/' <-- !!! without it, it will copy the files folder
    dest: ~/servers/nclient/

- name: create synced dirs
  become: false
  file:
    path: "~/servers/nclient/nextcloud{{ item|safe|trim }}"
    state: directory
    recurse: yes
  with_items: "{{ vars.server_dirs }}"

- name: Generating nextcloudcmd sync script2 (for the cron-job)
  become: false
  template:
    mode: 0700 #  only user can read/write/exec
    src: nextcloudcmd_cronjob.sh.j2
    dest: '~/servers/nclient/config/nextcloudcmd_cronjob.sh'

- name: Generating Dockerfile
  become: false
  template:
    mode: 0700 #  only user can read/write/exec
    src: Dockerfile.j2
    dest: '~/servers/nclient/Dockerfile'

- name: Generating Docker Compose file
  become: false
  template:
    mode: 0700 #  only user can read/write/exec
    src: docker-compose.yml.j2
    dest: '~/servers/nclient/docker-compose.yml'
  vars:
    uid: "{{ user_id.stdout }}"
    gid: "{{ group_id.stdout }}"

